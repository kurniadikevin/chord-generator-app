{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { colors } from \"./styles/colors\";\nimport { inputStyles } from \"./styles/input\";\nimport { typography } from \"./styles/typography\";\nvar Dropdown = function Dropdown(_ref) {\n  var label = _ref.label,\n    placeholder = _ref.placeholder,\n    helperText = _ref.helperText,\n    error = _ref.error,\n    getSelectedItemsLabel = _ref.getSelectedItemsLabel,\n    handleToggleModal = _ref.handleToggleModal,\n    isMultiple = _ref.isMultiple,\n    selectedItem = _ref.selectedItem,\n    selectedItems = _ref.selectedItems,\n    labelStyle = _ref.labelStyle,\n    dropdownStyle = _ref.dropdownStyle,\n    dropdownContainerStyle = _ref.dropdownContainerStyle,\n    selectedItemStyle = _ref.selectedItemStyle,\n    multipleSelectedItemStyle = _ref.multipleSelectedItemStyle,\n    dropdownErrorStyle = _ref.dropdownErrorStyle,\n    dropdownErrorTextStyle = _ref.dropdownErrorTextStyle,\n    dropdownHelperTextStyle = _ref.dropdownHelperTextStyle,\n    primaryColor = _ref.primaryColor,\n    disabled = _ref.disabled;\n  return React.createElement(View, {\n    style: [styles.dropdownInputContainer, dropdownContainerStyle]\n  }, label && label !== '' && React.createElement(Text, {\n    style: [styles.label, labelStyle]\n  }, label), React.createElement(Pressable, {\n    onPress: function onPress() {\n      return handleToggleModal();\n    },\n    style: function style(_ref2) {\n      var pressed = _ref2.pressed;\n      return [pressed && _objectSpread(_objectSpread({}, inputStyles.inputFocusState), {}, {\n        borderColor: primaryColor\n      }), inputStyles.input, dropdownStyle, error && error !== '' && !pressed && _objectSpread(_objectSpread({}, inputStyles.inputFocusErrorState), dropdownErrorStyle)];\n    },\n    disabled: disabled\n  }, React.createElement(ScrollView, {\n    horizontal: true,\n    alwaysBounceHorizontal: true,\n    showsHorizontalScrollIndicator: false\n  }, React.createElement(View, {\n    style: styles.selectedItemsContainer,\n    onStartShouldSetResponder: function onStartShouldSetResponder() {\n      return true;\n    }\n  }, isMultiple ? getSelectedItemsLabel().map(function (item, i) {\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return handleToggleModal();\n      },\n      key: \"SelectedItems\" + i,\n      disabled: disabled\n    }, React.createElement(Text, {\n      style: [styles.selectedItems, {\n        backgroundColor: primaryColor\n      }, multipleSelectedItemStyle]\n    }, item));\n  }) : React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return handleToggleModal();\n    },\n    disabled: disabled\n  }, React.createElement(Text, {\n    style: [styles.blackText, selectedItemStyle]\n  }, getSelectedItemsLabel()))), !selectedItem && (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length) === 0 && React.createElement(Text, {\n    style: styles.blackText\n  }, placeholder !== null && placeholder !== void 0 ? placeholder : 'Select an option')), React.createElement(View, {\n    style: styles.iconStyle\n  }, React.createElement(Image, {\n    source: require(\"../src/asset/arrow-down.png\")\n  }))), error && error !== '' && React.createElement(Text, {\n    style: [styles.error, dropdownErrorTextStyle]\n  }, error), helperText && helperText !== '' && !error && React.createElement(Text, {\n    style: [styles.helper, dropdownHelperTextStyle]\n  }, helperText));\n};\nvar styles = StyleSheet.create({\n  label: _objectSpread({\n    marginBottom: 16,\n    color: colors.gray\n  }, typography.caption),\n  inputFocusErrorState: {\n    borderWidth: 2,\n    borderStyle: 'solid',\n    borderColor: colors.red\n  },\n  iconStyle: {\n    position: 'absolute',\n    right: 25,\n    top: 25\n  },\n  error: _objectSpread({\n    color: colors.red,\n    marginTop: 8\n  }, typography.caption),\n  helper: _objectSpread({\n    marginTop: 8,\n    color: colors.primary\n  }, typography.caption),\n  dropdownInputContainer: {\n    marginBottom: 23,\n    width: '100%'\n  },\n  selectedItemsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  selectedItems: {\n    color: colors.white,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 10,\n    backgroundColor: colors.primary,\n    marginRight: 10\n  },\n  blackText: {\n    color: colors.black\n  }\n});\nexport default Dropdown;","map":{"version":3,"mappings":"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","names":["React","colors","inputStyles","typography","Dropdown","_ref","label","placeholder","helperText","error","getSelectedItemsLabel","handleToggleModal","isMultiple","selectedItem","selectedItems","labelStyle","dropdownStyle","dropdownContainerStyle","selectedItemStyle","multipleSelectedItemStyle","dropdownErrorStyle","dropdownErrorTextStyle","dropdownHelperTextStyle","primaryColor","disabled","View","style","styles","dropdownInputContainer","Text","Pressable","onPress","pressed","_ref2","inputFocusState","borderColor","input","inputFocusErrorState","ScrollView","horizontal","alwaysBounceHorizontal","showsHorizontalScrollIndicator","selectedItemsContainer","onStartShouldSetResponder","map","item","i","TouchableOpacity","key","backgroundColor","blackText","length","iconStyle","Image","source","require","helper","StyleSheet","create","marginBottom","color","gray","caption","borderWidth","borderStyle","red","position","right","top","marginTop","primary","width","flexDirection","flexWrap","white","paddingHorizontal","paddingVertical","borderRadius","marginRight","black"],"sources":["Dropdown.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  Pressable,\n  ScrollView,\n  StyleSheet,\n  Image,\n  TouchableOpacity,\n} from 'react-native';\nimport { colors } from './styles/colors';\nimport { inputStyles } from './styles/input';\nimport { typography } from './styles/typography';\n\nconst Dropdown = ({\n  label,\n  placeholder,\n  helperText,\n  error,\n  getSelectedItemsLabel,\n  handleToggleModal,\n  isMultiple,\n  selectedItem,\n  selectedItems,\n  labelStyle,\n  dropdownStyle,\n  dropdownContainerStyle,\n  selectedItemStyle,\n  multipleSelectedItemStyle,\n  dropdownErrorStyle,\n  dropdownErrorTextStyle,\n  dropdownHelperTextStyle,\n  primaryColor,\n  disabled,\n}: any) => {\n  return (\n    <View style={[styles.dropdownInputContainer, dropdownContainerStyle]}>\n      {label && label !== '' && (\n        <Text style={[styles.label, labelStyle]}>{label}</Text>\n      )}\n      <Pressable\n        onPress={() => handleToggleModal()}\n        style={({ pressed }) => [\n          pressed && {\n            ...inputStyles.inputFocusState,\n            borderColor: primaryColor,\n          },\n          inputStyles.input,\n          dropdownStyle,\n          error && //order matters\n            error !== '' &&\n            !pressed && {\n              ...inputStyles.inputFocusErrorState,\n              ...dropdownErrorStyle,\n            },\n        ]}\n        disabled={disabled}\n      >\n        <ScrollView\n          horizontal\n          alwaysBounceHorizontal\n          showsHorizontalScrollIndicator={false}\n        >\n          <View\n            style={styles.selectedItemsContainer}\n            onStartShouldSetResponder={() => true}\n          >\n            {isMultiple ? (\n              getSelectedItemsLabel().map((item: any, i: Number) => (\n                <TouchableOpacity\n                  onPress={() => handleToggleModal()}\n                  key={`SelectedItems${i}`}\n                  disabled={disabled}\n                >\n                  <Text\n                    style={[\n                      styles.selectedItems,\n                      { backgroundColor: primaryColor },\n                      multipleSelectedItemStyle,\n                    ]}\n                  >\n                    {item}\n                  </Text>\n                </TouchableOpacity>\n              ))\n            ) : (\n              <TouchableOpacity\n                onPress={() => handleToggleModal()}\n                disabled={disabled}\n              >\n                <Text style={[styles.blackText, selectedItemStyle]}>\n                  {getSelectedItemsLabel()}\n                </Text>\n              </TouchableOpacity>\n            )}\n          </View>\n\n          {!selectedItem && selectedItems?.length === 0 && (\n            <Text style={styles.blackText}>\n              {placeholder ?? 'Select an option'}\n            </Text>\n          )}\n        </ScrollView>\n        <View style={styles.iconStyle}>\n          <Image source={require('../src/asset/arrow-down.png')} />\n        </View>\n      </Pressable>\n\n      {error && error !== '' && (\n        <Text style={[styles.error, dropdownErrorTextStyle]}>{error}</Text>\n      )}\n\n      {helperText && helperText !== '' && !error && (\n        <Text style={[styles.helper, dropdownHelperTextStyle]}>\n          {helperText}\n        </Text>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  label: { marginBottom: 16, color: colors.gray, ...typography.caption },\n  inputFocusErrorState: {\n    borderWidth: 2,\n    borderStyle: 'solid',\n    borderColor: colors.red,\n  },\n  iconStyle: { position: 'absolute', right: 25, top: 25 },\n  error: { color: colors.red, marginTop: 8, ...typography.caption },\n  helper: { marginTop: 8, color: colors.primary, ...typography.caption },\n  dropdownInputContainer: { marginBottom: 23, width: '100%' },\n  selectedItemsContainer: { flexDirection: 'row', flexWrap: 'nowrap' },\n  selectedItems: {\n    color: colors.white,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 10,\n    backgroundColor: colors.primary,\n    marginRight: 10,\n  },\n  blackText: { color: colors.black },\n});\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}