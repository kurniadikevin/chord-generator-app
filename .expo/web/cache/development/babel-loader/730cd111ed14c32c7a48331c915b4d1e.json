{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useState } from 'react';\nimport Dropdown from \"./Dropdown\";\nimport CustomModal from \"./Modal\";\nimport DropdownList from \"./DropdownList\";\nimport { DEFAULT_OPTION_LABEL, DEFAULT_OPTION_VALUE } from \"./constants\";\nimport { Input } from \"./Input\";\nexport var DropdownSelect = function DropdownSelect(_ref, rest) {\n  var placeholder = _ref.placeholder,\n    label = _ref.label,\n    error = _ref.error,\n    helperText = _ref.helperText,\n    options = _ref.options,\n    optionLabel = _ref.optionLabel,\n    optionValue = _ref.optionValue,\n    onValueChange = _ref.onValueChange,\n    selectedValue = _ref.selectedValue,\n    isMultiple = _ref.isMultiple,\n    isSearchable = _ref.isSearchable,\n    labelStyle = _ref.labelStyle,\n    dropdownStyle = _ref.dropdownStyle,\n    dropdownContainerStyle = _ref.dropdownContainerStyle,\n    dropdownErrorStyle = _ref.dropdownErrorStyle,\n    dropdownErrorTextStyle = _ref.dropdownErrorTextStyle,\n    dropdownHelperTextStyle = _ref.dropdownHelperTextStyle,\n    selectedItemStyle = _ref.selectedItemStyle,\n    multipleSelectedItemStyle = _ref.multipleSelectedItemStyle,\n    modalBackgroundStyle = _ref.modalBackgroundStyle,\n    modalOptionsContainer = _ref.modalOptionsContainer,\n    searchInputStyle = _ref.searchInputStyle,\n    primaryColor = _ref.primaryColor,\n    disabled = _ref.disabled;\n  var _useState = useState(options ? options : []),\n    _useState2 = _slicedToArray(_useState, 2),\n    newOptions = _useState2[0],\n    setNewOptions = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    open = _useState4[0],\n    setOpen = _useState4[1];\n  var _useState5 = useState(selectedValue),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedItem = _useState6[0],\n    setSelectedItem = _useState6[1];\n  var _useState7 = useState(Array.isArray(selectedValue) ? selectedValue : selectedValue === '' || selectedValue === undefined ? [] : [selectedValue]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedItems = _useState8[0],\n    setSelectedItems = _useState8[1];\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    searchValue = _useState10[0],\n    setSearchValue = _useState10[1];\n  var handleSingleSelection = function handleSingleSelection(value) {\n    if (selectedItem === value) {\n      setSelectedItem(null);\n    } else {\n      setSelectedItem(value);\n      onValueChange(value);\n      setOpen(false);\n    }\n  };\n  var handleMultipleSelections = function handleMultipleSelections(value) {\n    var selectedValues = _toConsumableArray(selectedItems);\n    if (selectedValues.includes(value)) {\n      selectedValues = selectedValues.filter(function (item) {\n        return item !== value;\n      });\n    } else {\n      selectedValues.push(value);\n    }\n    setSelectedItems(selectedValues);\n  };\n  var getSelectedItemsLabel = function getSelectedItemsLabel() {\n    if (isMultiple) {\n      var selectedLabels = [];\n      selectedItems && selectedItems.forEach(function (element) {\n        var _options$find;\n        var selectedItemLabel = options && ((_options$find = options.find(function (item) {\n          return item[optionValue !== null && optionValue !== void 0 ? optionValue : DEFAULT_OPTION_VALUE] === element;\n        })) === null || _options$find === void 0 ? void 0 : _options$find[optionLabel]);\n        selectedLabels.push(selectedItemLabel);\n      });\n      return selectedLabels;\n    }\n    var selectedItemLabel = options && options.find(function (item) {\n      return item[optionValue !== null && optionValue !== void 0 ? optionValue : DEFAULT_OPTION_VALUE] === selectedItem;\n    });\n    return selectedItemLabel === null || selectedItemLabel === void 0 ? void 0 : selectedItemLabel[optionLabel !== null && optionLabel !== void 0 ? optionLabel : DEFAULT_OPTION_LABEL];\n  };\n  var onSearch = function onSearch(value) {\n    setSearchValue(value);\n    var searchText = value.toString().toLocaleLowerCase().trim();\n    var regexFilter = new RegExp(searchText, 'i');\n    var searchResults = options.filter(function (item) {\n      if (item[optionLabel !== null && optionLabel !== void 0 ? optionLabel : DEFAULT_OPTION_LABEL].toString().toLowerCase().search(regexFilter) !== -1 || item[optionValue !== null && optionValue !== void 0 ? optionValue : DEFAULT_OPTION_VALUE].toString(regexFilter).toLowerCase().search(regexFilter) !== -1) {\n        return item;\n      }\n    });\n    setNewOptions(searchResults);\n  };\n  var handleToggleModal = function handleToggleModal() {\n    setOpen(!open);\n    setSearchValue('');\n    setNewOptions(options);\n  };\n  return React.createElement(React.Fragment, null, React.createElement(Dropdown, _extends({\n    label: label,\n    placeholder: placeholder,\n    helperText: helperText,\n    error: error,\n    getSelectedItemsLabel: getSelectedItemsLabel,\n    selectedItem: selectedItem,\n    selectedItems: selectedItems,\n    handleToggleModal: handleToggleModal,\n    labelStyle: labelStyle,\n    dropdownStyle: dropdownStyle,\n    dropdownContainerStyle: dropdownContainerStyle,\n    dropdownErrorStyle: dropdownErrorStyle,\n    dropdownErrorTextStyle: dropdownErrorTextStyle,\n    dropdownHelperTextStyle: dropdownHelperTextStyle,\n    selectedItemStyle: selectedItemStyle,\n    multipleSelectedItemStyle: multipleSelectedItemStyle,\n    isMultiple: isMultiple,\n    primaryColor: primaryColor,\n    disabled: disabled\n  }, rest)), React.createElement(CustomModal, {\n    open: open,\n    handleToggleModal: handleToggleModal,\n    modalBackgroundStyle: modalBackgroundStyle,\n    modalOptionsContainer: modalOptionsContainer,\n    onRequestClose: function onRequestClose() {}\n  }, isSearchable && React.createElement(Input, {\n    value: searchValue,\n    onChangeText: function onChangeText(text) {\n      return onSearch(text);\n    },\n    style: searchInputStyle,\n    primaryColor: primaryColor\n  }), React.createElement(DropdownList, {\n    options: newOptions,\n    optionLabel: optionLabel,\n    optionValue: optionValue,\n    isMultiple: isMultiple,\n    selectedItems: selectedItems,\n    selectedItem: selectedItem,\n    handleMultipleSelections: handleMultipleSelections,\n    handleSingleSelection: handleSingleSelection,\n    primaryColor: primaryColor\n  })));\n};\nexport default DropdownSelect;","map":{"version":3,"mappings":"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","names":["React","useState","Dropdown","CustomModal","DropdownList","DEFAULT_OPTION_LABEL","DEFAULT_OPTION_VALUE","Input","DropdownSelect","_ref","rest","placeholder","label","error","helperText","options","optionLabel","optionValue","onValueChange","selectedValue","isMultiple","isSearchable","labelStyle","dropdownStyle","dropdownContainerStyle","dropdownErrorStyle","dropdownErrorTextStyle","dropdownHelperTextStyle","selectedItemStyle","multipleSelectedItemStyle","modalBackgroundStyle","modalOptionsContainer","searchInputStyle","primaryColor","disabled","newOptions","setNewOptions","open","setOpen","selectedItem","setSelectedItem","Array","isArray","undefined","selectedItems","setSelectedItems","searchValue","setSearchValue","handleSingleSelection","value","handleMultipleSelections","selectedValues","includes","filter","item","push","getSelectedItemsLabel","selectedLabels","forEach","element","selectedItemLabel","find","_options$find","onSearch","searchText","toString","toLocaleLowerCase","trim","regexFilter","RegExp","searchResults","toLowerCase","search","handleToggleModal","onRequestClose","onChangeText","text","style"],"sources":["index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Dropdown from './Dropdown';\nimport CustomModal from './Modal';\nimport DropdownList from './DropdownList';\nimport { DEFAULT_OPTION_LABEL, DEFAULT_OPTION_VALUE } from './constants';\nimport type { DropdownProps } from './types/index.types';\nimport { Input } from './Input';\n\nexport const DropdownSelect = (\n  {\n    placeholder,\n    label,\n    error,\n    helperText,\n    options,\n    optionLabel,\n    optionValue,\n    onValueChange,\n    selectedValue,\n    isMultiple,\n    isSearchable,\n    labelStyle,\n    dropdownStyle,\n    dropdownContainerStyle,\n    dropdownErrorStyle,\n    dropdownErrorTextStyle,\n    dropdownHelperTextStyle,\n    selectedItemStyle,\n    multipleSelectedItemStyle,\n    modalBackgroundStyle,\n    modalOptionsContainer,\n    searchInputStyle,\n    primaryColor,\n    disabled,\n  }: DropdownProps,\n  rest: any\n) => {\n  const [newOptions, setNewOptions] = useState(options ? options : []);\n  const [open, setOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState(selectedValue); //for single selection\n  const [selectedItems, setSelectedItems] = useState(\n    Array.isArray(selectedValue)\n      ? selectedValue\n      : selectedValue === '' || selectedValue === undefined\n      ? []\n      : [selectedValue]\n  ); //for multiple selection\n  const [searchValue, setSearchValue] = useState('');\n\n  /*===========================================\n   * Selection handlers\n   *==========================================*/\n  const handleSingleSelection = (value: any) => {\n    if (selectedItem === value) {\n      setSelectedItem(null);\n    } else {\n      setSelectedItem(value);\n      onValueChange(value); //send value to parent\n      setOpen(false); //close modal upon selection\n    }\n  };\n\n  const handleMultipleSelections = (value: any) => {\n    let selectedValues = [...selectedItems];\n\n    if (selectedValues.includes(value)) {\n      selectedValues = selectedValues.filter((item) => item !== value);\n    } else {\n      selectedValues.push(value);\n    }\n    setSelectedItems(selectedValues);\n  };\n\n  /*===========================================\n   * Get label handler\n   *==========================================*/\n  const getSelectedItemsLabel = () => {\n    if (isMultiple) {\n      let selectedLabels: Array<string> = [];\n      selectedItems &&\n        selectedItems.forEach((element) => {\n          let selectedItemLabel =\n            options &&\n            options.find(\n              (item: any) =>\n                item[optionValue ?? DEFAULT_OPTION_VALUE] === element\n            )?.[optionLabel];\n          selectedLabels.push(selectedItemLabel);\n        });\n      return selectedLabels;\n    }\n\n    let selectedItemLabel =\n      options &&\n      options.find(\n        (item: any) =>\n          item[optionValue ?? DEFAULT_OPTION_VALUE] === selectedItem\n      );\n    return selectedItemLabel?.[optionLabel ?? DEFAULT_OPTION_LABEL];\n  };\n\n  /*===========================================\n   * Search\n   *==========================================*/\n  const onSearch = (value: string) => {\n    setSearchValue(value);\n\n    let searchText = value.toString().toLocaleLowerCase().trim();\n\n    const regexFilter = new RegExp(searchText, 'i');\n\n    const searchResults = options.filter((item: any) => {\n      if (\n        item[optionLabel ?? DEFAULT_OPTION_LABEL]\n          .toString()\n          .toLowerCase()\n          .search(regexFilter) !== -1 ||\n        item[optionValue ?? DEFAULT_OPTION_VALUE]\n          .toString(regexFilter)\n          .toLowerCase()\n          .search(regexFilter) !== -1\n      ) {\n        return item;\n      }\n    });\n\n    setNewOptions(searchResults);\n  };\n\n  /*===========================================\n   * Modal\n   *==========================================*/\n  const handleToggleModal = () => {\n    setOpen(!open);\n    setSearchValue('');\n    setNewOptions(options);\n  };\n\n  return (\n    <>\n      <Dropdown\n        label={label}\n        placeholder={placeholder}\n        helperText={helperText}\n        error={error}\n        getSelectedItemsLabel={getSelectedItemsLabel}\n        selectedItem={selectedItem}\n        selectedItems={selectedItems}\n        handleToggleModal={handleToggleModal}\n        labelStyle={labelStyle}\n        dropdownStyle={dropdownStyle}\n        dropdownContainerStyle={dropdownContainerStyle}\n        dropdownErrorStyle={dropdownErrorStyle}\n        dropdownErrorTextStyle={dropdownErrorTextStyle}\n        dropdownHelperTextStyle={dropdownHelperTextStyle}\n        selectedItemStyle={selectedItemStyle}\n        multipleSelectedItemStyle={multipleSelectedItemStyle}\n        isMultiple={isMultiple}\n        primaryColor={primaryColor}\n        disabled={disabled}\n        {...rest}\n      />\n      <CustomModal\n        open={open}\n        handleToggleModal={handleToggleModal}\n        modalBackgroundStyle={modalBackgroundStyle}\n        modalOptionsContainer={modalOptionsContainer}\n        onRequestClose={() => {}}\n      >\n        {isSearchable && (\n          <Input\n            value={searchValue}\n            onChangeText={(text: string) => onSearch(text)}\n            style={searchInputStyle}\n            primaryColor={primaryColor}\n          />\n        )}\n        <DropdownList\n          options={newOptions}\n          optionLabel={optionLabel}\n          optionValue={optionValue}\n          isMultiple={isMultiple}\n          selectedItems={selectedItems}\n          selectedItem={selectedItem}\n          handleMultipleSelections={handleMultipleSelections}\n          handleSingleSelection={handleSingleSelection}\n          primaryColor={primaryColor}\n        />\n      </CustomModal>\n    </>\n  );\n};\n\nexport default DropdownSelect;\n"]},"metadata":{},"sourceType":"module"}